from . import config as _config
from mysupport.Pather import Pather
import datetime
import os
import shutil
import re
from mysupport.MSProjectEx import MSProjectEx

PACKAGE_NAME = "ael_public_functions"

__version__ = "1.0.0"


def getlastfile(path: Pather, type: str):
    if not os.path.exists(str(path)):
        raise ValueError("路径不存在")

    for root, dirs, files in os.walk(str(path)):
        break

    files = [filename for filename in files if re.match(
        r"^\d{4}-\d{2}-\d{2}"+f"\.{type}$", filename)]
    if len(files) == 0:
        return None
    files.sort(reverse=True)
    return path(files[0])



@_config.add_work_file
def add_work_file(path: str, config: dict = {}):
    """
    在最新的.mpp文件中添加任务，若无则创建新文件并添加任务。
    Args:
        path (str): 包含.mpp文件的文件夹路径。
        config (dict, optional): 包含任务的配置信息。默认为{}。

    Returns:
        None
    """

    # 导入必要的库和模块
    import PySimpleGUI as sg

    # 初始化进度条窗口
    layout = [
        [
            sg.Column(
                [
                    [sg.Text("进度")],
                    [sg.ProgressBar(max_value=100, size=(
                        20, 10), orientation="horizontal", key="-PROGRESS_BAR-")],
                    [sg.Text(size=(40, 1), key="-TASK_INFO-")],
                    [sg.Cancel()]
                ],
                element_justification="center",  # 添加居中对齐
            )
        ]
    ]
    window = sg.Window("任务进度", layout, finalize=True)
    progress_bar = window["-PROGRESS_BAR-"]

    # 创建MS Project应用程序对象
    project = MSProjectEx()
    project.Visible = False

    # 获取当前日期和.mpp文件名
    now = datetime.datetime.now()
    filename = "%s.mpp" % now.strftime(r"%Y-%m-%d")

    # 若.mpp文件存在，则打开并返回
    if os.path.exists(Pather(path)(filename)):
        project.Visible = True
        project.FileOpen(Pather(path)(filename))
        return

    # 若.mpp文件不存在，则复制最近文件中的任务到新文件中
    else:
        lastfile = getlastfile(Pather(path), "mpp")

        # 如果最近文件存在
        if lastfile != None:
            # 打开最近使用的.mpp文件
            old_project_file = project.FileOpen(lastfile)
            # project.FileOpen(lastfile)
            window['-TASK_INFO-'].update("获取任务配置信息并创建新任务...")
            progress_bar.update(10)
            # 获取任务配置信息并创建新任务
            new_tasksA = list()
            tasks = old_project_file.Tasks
            for task in tasks:
                if task is None:  # 跳过空任务
                    continue

                if task.OutlineLevel > 1:  # 跳过非主任务
                    continue

                if task.PercentComplete == 100:  # 跳过已完成任务
                    continue

                new_task_info: dict = {"Name": task.Name,
                                       "Start": task.Start,
                                       "PercentComplete": task.PercentComplete,
                                       "Notes": task.Notes,
                                       "Priority": task.Priority,
                                       "OutlineLevel": task.OutlineLevel}
                new_tasksA.append(new_task_info)

                def print_subtasks(_task):
                    for subtask in _task.OutlineChildren:
                        new_children_task_info: dict = {"Name": subtask.Name,
                                            "Start": subtask.Start,
                                            "PercentComplete": subtask.PercentComplete,
                                            "OutlineLevel": subtask.OutlineLevel}
                        new_tasksA.append(new_children_task_info)
                        print_subtasks(subtask)

                print_subtasks(task)

            # 关闭旧文件，创建新文件并清空任务
            project.FileClose(old_project_file)
            shutil.copy(lastfile, Pather(path)(filename))

            def clear_project_tasks(_project):
                tasks = _project.ActiveProject.Tasks
                for i in range(tasks.Count, 0, -1):
                    try:
                        task = tasks.Item(i)
                        print(task)
                        task.Delete()
                    except:
                        pass
            new_project_file = project.FileOpen(Pather(path)(filename))
            window['-TASK_INFO-'].update("清空旧任务...")
            progress_bar.update(30)
            clear_project_tasks(project)
            new_project_file.ProjectStart = datetime.datetime.now() + \
                datetime.timedelta(hours=8)
            # 将新任务添加到新文件中
            for index, new_task_info_ in enumerate(new_tasksA):
                # 更新进度条
                progress = int((index / len(new_tasksA)) * 100) * 0.7 + 30
                event, values = window.read(timeout=0)
                if event == "Cancel" or event == sg.WIN_CLOSED:
                    break

                task_name = new_task_info_['Name']
                task_info_text = f"正在处理任务: {task_name}"
                window['-TASK_INFO-'].update(task_info_text)
                progress_bar.update(progress)

                new_task = new_project_file.Tasks.Add(Name=task_name)
                for k, v in new_task_info_.items():
                    if k == "Name":
                        continue
                    setattr(new_task, k, v)

            progress_bar.update(100)
            window['-TASK_INFO-'].update("任务完成！")
        else:
            # 不存在则直接新建
            project.Projects.Add().SaveAs(Pather(path)(filename))
            project.Visible = True
            return

    # 保存新文件并显示MS Project应用程序
    new_project_file.SaveAs(Pather(path)(filename))
    project.FileClose(new_project_file)
    project.Visible = True
    project.FileOpen(Pather(path)(filename))

    # 关闭进度条窗口
    window.close()
